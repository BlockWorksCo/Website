<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>testing on Tickle.Dev</title>
    <link>https://tickle.dev/tags/testing/</link>
    <description>Recent content in testing on Tickle.Dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Jan 2019 22:24:08 +0000</lastBuildDate>
    
	<atom:link href="https://tickle.dev/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Design for test</title>
      <link>https://tickle.dev/posts/designfortest/</link>
      <pubDate>Mon, 21 Jan 2019 22:24:08 +0000</pubDate>
      
      <guid>https://tickle.dev/posts/designfortest/</guid>
      <description>Embedded systems are by definition one part of a larger device. The purpose of the software is not to stand alone but function within another device. When testing, this cannot be ignored.
Differences from hardware The phrase &amp;ldquo;design for test&amp;rdquo; is typically applied to hardware, and to some extent this topic is a logical extension from the hardware to the software.
When looking at hardware from a software (testing) point-of-view, there are some crticial differences:</description>
    </item>
    
    <item>
      <title>Build Time Protection</title>
      <link>https://tickle.dev/posts/buildtimeprotection/</link>
      <pubDate>Sun, 20 Jan 2019 19:14:13 +0000</pubDate>
      
      <guid>https://tickle.dev/posts/buildtimeprotection/</guid>
      <description>Build Time Protection.  Static analysis. Simulation &amp;amp; host-based testing. Unit testing. Use C++ and vectors instead of arrays.  </description>
    </item>
    
  </channel>
</rss>