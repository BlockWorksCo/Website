<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Threads on BlockWorks Co</title>
    <link>http://BlockWorks.co/tags/threads/</link>
    <description>Recent content in Threads on BlockWorks Co</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Jan 2019 20:18:15 +0000</lastBuildDate>
    
	<atom:link href="http://BlockWorks.co/tags/threads/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Concurrency and threads</title>
      <link>http://BlockWorks.co/posts/concurrency/</link>
      <pubDate>Mon, 21 Jan 2019 20:18:15 +0000</pubDate>
      
      <guid>http://BlockWorks.co/posts/concurrency/</guid>
      <description>Threads are not &amp;lsquo;free&amp;rsquo;. Threads come with significant cognitive overhead and management complexity.
Overheads of threading  RAM usage. Context switching. Concurrency management (semaphore, mutexes, queues, etc). Startup and shutdown overhead (synchronisation).  Good reasons to use threads  When dealing with a truly asynchronous source of events (i.e. from an external device). When the workload is such that a single CPU cannot complete the operation by the deadline. To perform the oeprations of a lower-half of an interrupt handler.</description>
    </item>
    
    <item>
      <title>Super-loop vs threads</title>
      <link>http://BlockWorks.co/posts/superloopversusthreads/</link>
      <pubDate>Mon, 21 Jan 2019 19:07:00 +0000</pubDate>
      
      <guid>http://BlockWorks.co/posts/superloopversusthreads/</guid>
      <description>A pattern that has mostly fallen out of fashion these days is the &amp;ldquo;super loop&amp;rdquo;.
Consider a system that has numerous operations to perform. These operations are notionally decoupled and so can be run concurrently.
The two patterns we are considering here are:
Super loop int main() { while(true) { enterLowPowerMode(); checkConditionOne(); checkConditionTwo(); } }  Threads int threadOne() { while(true) { checkConditionOne(); } } int threadTwo() { while(true) { checkConditionTwo(); } } int main() { startThread(threadOne); startThread(threadTwo); while(true) { enterLowPowerMode(); } }  Both the above snippets logically do the same thing with different runtime behaviours.</description>
    </item>
    
  </channel>
</rss>